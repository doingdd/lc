#!/usr/bin/python
class Node():
    def __init__(self,val=None):
        self.val = val
        self.next = None
class ListNode():
    def __init__(self):
        self.head = None

    def append(self,val):
        node = Node(val)
        if not self.head:
            self.head = node
            return

        p = self.head
        while p.next:
            p = p.next

        p.next = node
 
    def pprint(self):
        if not self.head:
            print "Empty"
        p = self.head
        while p:
            print p.val,
            p = p.next

        print ''

def construct_node(l):
    lnode = ListNode()
    for i in l:
        lnode.append(i)

    return lnode

def merge_list(l1,l2):
    l3 = Node()
    head = l3
    i = l1.head
    j = l2.head
    while i and j:
        if i.val < j.val:
            l3.next = i
            i = i.next
        else:
            l3.next = j
            j = j.next
      
        l3 = l3.next

    l3.next = i if i else j
    
    result = ListNode()
    result.head = head.next
    return result

case = [
  [(1,2,3),(4,5,6)],
  [(2,4,3),(5,6,4)],
  [(1,3,4),(2,)],
  [(4,5,6),(1,2,3)],
  [(),(1,2,3)],
  [(),()]
]
for c in case:
    l1 = construct_node(c[0])
    l2 = construct_node(c[1])
    l3 = merge_list(l1,l2)
    print "case is {0}".format(c)
    print "result is",
    l3.pprint()
