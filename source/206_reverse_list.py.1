#!/usr/bin/python

class LNode():
    def __init__(self,val=None):
        self.val = val
        self.next = None
        
class LList():
    def __init__(self):
        self.head = None

    def append(self,val):
        node = LNode(val)
        if not self.head:
            self.head = node
            return

        p = self.head
        while p.next:
            p = p.next

        p.next = node
        
    def lprint(self):
        if not self.head:
            print "[]"
            return

        p = self.head
        while p:
            print p.val,
            p = p.next

        print ''

    def reverse(self,head):
        pre = None
        cur = self.head
        while cur:
            temp = cur.next
            cur.next = pre
            pre = cur
            cur = temp

        head = pre 
    
        return head 

case = [[1,2,3,4,5],
        [1,1,1]]

for i in case:
    my_list = LList()
    for j in i:
        my_list.append(j)

    my_list.lprint()
    my_list.head = my_list.reverse(my_list.head)
    my_list.lprint()
    break
